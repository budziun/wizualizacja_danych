#cw 1
class bohater:
    def __init__(self,imie, zywotnosc, punkty_taktyki):
        self.imie =imie
        self.zywotnosc = max(min(zywotnosc,100),0)
        self.punkty_taktyki =  punkty_taktyki

    def zmien_zywotnosc(self,nowa_zywotnosc):
        self.zywotnosc = max(min(nowa_zywotnosc,100),0)

    def moc_ataku(self):
        pass

class Lucznik(bohater):
    def __init__(self,imie,zywotnosc,zrecznosc,punkty_taktyki):
        super().__init__(imie,zywotnosc,punkty_taktyki)
        self.zrecznosc = zrecznosc

    def moc_ataku(self):
        return self.zrecznosc * self.punkty_taktyki * self.zywotnosc / 100

class Wojownik(bohater):
    def __init__(self,imie,zywotnosc,sila,punkty_taktyki):
        super().__init__(imie,zywotnosc,punkty_taktyki)
        self.sila = sila

    def moc_ataku(self):
        return self.sila * self.punkty_taktyki * self.zywotnosc / 100

lucznik = Lucznik("Robin Hood",75,10,8)
wojownik = Wojownik("Conan Barbarzynca",90,20,5)

print(lucznik.imie)
print(lucznik.zywotnosc)
print(lucznik.zrecznosc)
print(lucznik.punkty_taktyki)
print(lucznik.moc_ataku())

print(wojownik.imie)
print(wojownik.zywotnosc)
print(wojownik.sila)
print(wojownik.punkty_taktyki)
print(wojownik.moc_ataku())

lucznik.zmien_zywotnosc(50)
print(lucznik.zywotnosc)
print(lucznik.moc_ataku())

#cw2
import datetime

class Person:
    def __init__(self, imie, nazwisko, pesel):
        self.imie = imie
        self.nazwisko = nazwisko
        self.pesel = pesel
        self._parse_pesel()

    def _parse_pesel(self):
        rok = int(self.pesel[:2])
        miesiac = int(self.pesel[2:4])
        dzien = int(self.pesel[4:6])

        if miesiac > 12:
            rok += 2000
            miesiac -= 20
        else:
            rok += 1900

        self.data_urodzenia = datetime.date(rok, miesiac, dzien)

        cyfra_plec = int(self.pesel[-2])
        if cyfra_plec % 2 == 0:
            self.plec = 'Kobieta'
        else:
            self.plec = 'Mężczyzna'

    def oblicz_wiek(self, dzisiaj=None):
        if dzisiaj is None:
            dzisiaj = datetime.date.today()

        wiek = dzisiaj.year - self.data_urodzenia.year - ((dzisiaj.month, dzisiaj.day) < (self.data_urodzenia.month, self.data_urodzenia.day))

        return wiek

    def wyswietl_informacje(self):
        print(f"Imię: {self.imie}")
        print(f"Nazwisko: {self.nazwisko}")
        print(f"Pesel: {self.pesel}")
        print(f"Data urodzenia: {self.data_urodzenia.strftime('%Y-%m-%d')}")
        print(f"Płeć: {self.plec}")
        print(f"Wiek: {self.oblicz_wiek()}")

person = Person('Jakub','Budzich','02251904810')
person.wyswietl_informacje()

#cw3
class Vector:
    def __init__(self, values):
        self.values = values

    def __str__(self):
        return str(self.values)

    def __add__(self, other):
        if len(self.values) != len(other.values):
            raise ValueError("Wektory musza miec taka sama dlugosc")

        result = []
        for i in range(len(self.values)):
            result.append(self.values[i] + other.values[i])

        return Vector(result)

    def __sub__(self, other):
        if len(self.values) != len(other.values):
            raise ValueError("Wektory musza miec taka sama dlugosc")

        result = []
        for i in range(len(self.values)):
            result.append(self.values[i] - other.values[i])

        return Vector(result)

    def __mul__(self, other):
        if isinstance(other, Vector):
            if len(self.values) != len(other.values):
                raise ValueError("Wektory musza miec taka sama dlugosc")

            result = 0
            for i in range(len(self.values)):
                result += self.values[i] * other.values[i]

            return result
        else:
            result = []
            for i in range(len(self.values)):
                result.append(self.values[i] * other)

            return Vector(result)

    def __rmul__(self, other):
        result = []
        for i in range(len(self.values)):
            result.append(self.values[i] * other)

        return Vector(result)

v1 = Vector([1, 2, 3])
v2 = Vector([4, 5, 6])

print(v1 + v2)
print(v1 - v2)
print(v1 * v2)
print(2 * v1)
print(v1 * 2)
